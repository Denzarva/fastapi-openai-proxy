from langgraph.graph import StateGraph
from typing import TypedDict
import os
import httpx

# --- –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∞
class GraphState(TypedDict):
    messages: list
    context: str

# --- –ó–∞–ø—Ä–æ—Å –∫ OpenAI Chat Completion
async def call_openai(messages, context):
    system_prompt = f"–¢—ã ‚Äî AI-—é—Ä–∏—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
    chat_messages = [{"role": "system", "content": system_prompt}] + messages

    print("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")  # ‚úÖ –ª–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    async with httpx.AsyncClient(timeout=httpx.Timeout(60.0, read=60.0, connect=10.0)) as client:
        resp = await client.post(
            "https://api.openai.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {os.getenv('OPENAI_API_KEY')}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-4o",
                "messages": chat_messages,
                "temperature": 0.7
            }
        )
        resp.raise_for_status()
        return resp.json()["choices"][0]["message"]["content"]

# --- –£–∑–µ–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
async def generate_answer(state: GraphState):
    messages = state["messages"]
    context = state["context"]
    response = await call_openai(messages, context)
    return {"messages": messages, "context": context, "response": response}

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ LangGraph
def run_jurist_graph(user_messages, context):
    builder = StateGraph(GraphState)
    builder.add_node("generate", generate_answer)
    builder.set_entry_point("generate")
    builder.set_finish_point("generate")
    graph = builder.compile()

    state = {
        "messages": user_messages,
        "context": context
    }

    result = graph.invoke(state)
    return result["response"]
